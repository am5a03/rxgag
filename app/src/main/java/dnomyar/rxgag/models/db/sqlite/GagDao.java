package dnomyar.rxgag.models.db.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import dnomyar.rxgag.models.db.sqlite.Gag;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAG".
*/
public class GagDao extends AbstractDao<Gag, Long> {

    public static final String TABLENAME = "GAG";

    /**
     * Properties of entity Gag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UpdateTime = new Property(1, Long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property CreatedAt = new Property(2, Long.class, "createdAt", false, "CREATED_AT");
        public final static Property GagId = new Property(3, String.class, "gagId", false, "GAG_ID");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Image = new Property(5, String.class, "image", false, "IMAGE");
        public final static Property Score = new Property(6, Long.class, "score", false, "SCORE");
    };


    public GagDao(DaoConfig config) {
        super(config);
    }
    
    public GagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UPDATE_TIME\" INTEGER," + // 1: updateTime
                "\"CREATED_AT\" INTEGER," + // 2: createdAt
                "\"GAG_ID\" TEXT," + // 3: gagId
                "\"TITLE\" TEXT," + // 4: title
                "\"IMAGE\" TEXT," + // 5: image
                "\"SCORE\" INTEGER);"); // 6: score
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_GAG_GAG_ID ON GAG" +
                " (\"GAG_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Gag entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(2, updateTime);
        }
 
        Long createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(3, createdAt);
        }
 
        String gagId = entity.getGagId();
        if (gagId != null) {
            stmt.bindString(4, gagId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(6, image);
        }
 
        Long score = entity.getScore();
        if (score != null) {
            stmt.bindLong(7, score);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Gag readEntity(Cursor cursor, int offset) {
        Gag entity = new Gag( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // updateTime
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // createdAt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gagId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // image
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // score
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Gag entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUpdateTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCreatedAt(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setGagId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setScore(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Gag entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Gag entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
