package dnomyar.rxgag.models.db.sqlite;

import dnomyar.rxgag.models.db.sqlite.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "GAG_LIST_ITEM".
 */
public class GagListItem {

    private Long id;
    private Long updateTime;
    private Long createdAt;
    private String listKey;
    private Long gagDBId;
    private String gagId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GagListItemDao myDao;

    private Gag gag;
    private Long gag__resolvedKey;


    public GagListItem() {
    }

    public GagListItem(Long id) {
        this.id = id;
    }

    public GagListItem(Long id, Long updateTime, Long createdAt, String listKey, Long gagDBId, String gagId) {
        this.id = id;
        this.updateTime = updateTime;
        this.createdAt = createdAt;
        this.listKey = listKey;
        this.gagDBId = gagDBId;
        this.gagId = gagId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGagListItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(Long updateTime) {
        this.updateTime = updateTime;
    }

    public Long getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(Long createdAt) {
        this.createdAt = createdAt;
    }

    public String getListKey() {
        return listKey;
    }

    public void setListKey(String listKey) {
        this.listKey = listKey;
    }

    public Long getGagDBId() {
        return gagDBId;
    }

    public void setGagDBId(Long gagDBId) {
        this.gagDBId = gagDBId;
    }

    public String getGagId() {
        return gagId;
    }

    public void setGagId(String gagId) {
        this.gagId = gagId;
    }

    /** To-one relationship, resolved on first access. */
    public Gag getGag() {
        Long __key = this.gagDBId;
        if (gag__resolvedKey == null || !gag__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GagDao targetDao = daoSession.getGagDao();
            Gag gagNew = targetDao.load(__key);
            synchronized (this) {
                gag = gagNew;
            	gag__resolvedKey = __key;
            }
        }
        return gag;
    }

    public void setGag(Gag gag) {
        synchronized (this) {
            this.gag = gag;
            gagDBId = gag == null ? null : gag.getId();
            gag__resolvedKey = gagDBId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
